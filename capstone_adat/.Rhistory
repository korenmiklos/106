glmnet_model_1
glmnet_model_2
tune_grid2 <- data.frame("cp" = 0.0001)
set.seed(125)
rpart_model_1 <- train(default ~ poly(curr_assets, 3) + poly(liq_assets, 3) + poly(labor_avg, 3) + poly(personnel_exp, 3),
data = train_data,
method = "rpart",
preProcess = c("center", "scale"),
trControl = train_control,
na.action = na.omit,
tuneGrid = tune_grid2,
metric = "ROC")  # set it to ROC to choose models based on AUC
rpart_model_2 <- train(default ~ poly(curr_assets, 3) + poly(liq_assets, 3) + poly(labor_avg, 3) + poly(personnel_exp, 3) + urban_m + ind + inoffice_years + comp_age + CEO_age + founded_year,
data = train_data,
method = "rpart",
preProcess = c("center", "scale"),
trControl = train_control,
na.action = na.omit,
tuneGrid = tune_grid2,
metric = "ROC")  # set it to ROC to choose models based on AUC
rpart_model_1
rpart_model_2
set.seed(625)
test_prediction_glmnet <- predict.train(glmnet_model_1,
newdata = test_data,
type = "prob")
glmnet_prediction <- prediction(test_prediction_glmnet$Yes,
test_data[["default"]])
glmnet_perf <- performance(glmnet_prediction, measure = "tpr", x.measure = "fpr")
glmnet_roc_df <- data.table(
model = "glmnet",
FPR = glmnet_perf@x.values[[1]],
TPR = glmnet_perf@y.values[[1]],
cutoff = glmnet_perf@alpha.values[[1]]
)
test_prediction_rpart <- predict.train(rpart_model_2,
newdata = test_data,
type = "prob")
rpart_prediction <- prediction(test_prediction_rpart$Yes,
test_data[["default"]])
rpart_perf <- performance(rpart_prediction, measure = "tpr", x.measure = "fpr")
rpart_roc_df <- data.table(
model = "rpart",
FPR = rpart_perf@x.values[[1]],
TPR = rpart_perf@y.values[[1]],
cutoff = rpart_perf@alpha.values[[1]]
)
roc_df <- rbind(rpart_roc_df, glmnet_roc_df)
ggplot(roc_df) +
geom_line(aes(FPR, TPR, color = model), size = 2) +
geom_abline(intercept = 0, slope = 1,  linetype = "dotted", col = "black") +
scale_y_continuous(limits = c(0, 1), breaks = seq(0, 1, .1)) +
scale_x_continuous(limits = c(0, 1), breaks = seq(0, 1, .1)) +
xlab("False Positive Rate") + ylab("True Positive Rate")
glmnet_AUC <- performance(glmnet_prediction, measure = "auc")@y.values[[1]]
print(glmnet_AUC)
rpart_AUC <- performance(rpart_prediction, measure = "auc")@y.values[[1]]
print(rpart_AUC)
test_prediction_matrix_glmnet <- predict.train(glmnet_model_2,
newdata = test_data)
test_truth <- test_data[["default"]]
confusionMatrix(test_prediction_matrix_glmnet, test_truth)
test_prediction_matrix_rpart <- predict.train(rpart_model_2,
newdata = test_data)
test_truth <- test_data[["default"]]
confusionMatrix(test_prediction_matrix_rpart, test_truth)
thresholds <- seq(0.05, 0.2, by = 0.01)
true_positive_rates <- rep(0, length(thresholds))
false_positive_rates <- rep(0, length(thresholds))
for (ix in 1:length(thresholds)) {
thr <- thresholds[ix]
test_prediction <- ifelse(test_prediction_glmnet$Yes > thr, "Yes", "No")
test_prediction <- factor(test_prediction, levels = c("Yes", "No"))
cm <- as.matrix(confusionMatrix(test_prediction, test_truth))
true_positive_rates[ix] <- cm[1, 1] / (cm[1, 1] + cm[2, 1])
false_positive_rates[ix] <- cm[1, 2] / (cm[1, 2] + cm[2, 2])
}
manual_roc <- data.table("threshold" = thresholds,
"true_positive_rate" = true_positive_rates,
"false_positive_rate" = false_positive_rates)
ggplot(data = manual_roc,
aes(x = false_positive_rate,
y = true_positive_rate,
color = threshold)) +
scale_y_continuous(limits = c(0, 1), breaks = seq(0, 1, .1)) +
scale_x_continuous(limits = c(0, 1), breaks = seq(0, 1, .1)) +
geom_point()
thresholds2 <- seq(0.05, 0.2, by = 0.01)
true_positive_rates <- rep(0, length(thresholds2))
false_positive_rates <- rep(0, length(thresholds2))
for (ix in 1:length(thresholds2)) {
thr <- thresholds2[ix]
test_prediction2 <- ifelse(test_prediction_rpart$Yes > thr, "Yes", "No")
test_prediction2 <- factor(test_prediction2, levels = c("Yes", "No"))
cm <- as.matrix(confusionMatrix(test_prediction2, test_truth))
true_positive_rates[ix] <- cm[1, 1] / (cm[1, 1] + cm[2, 1])
false_positive_rates[ix] <- cm[1, 2] / (cm[1, 2] + cm[2, 2])
}
manual_roc <- data.table("threshold" = thresholds2,
"true_positive_rate" = true_positive_rates,
"false_positive_rate" = false_positive_rates)
ggplot(data = manual_roc,
aes(x = false_positive_rate,
y = true_positive_rate,
color = threshold)) +
scale_y_continuous(limits = c(0, 1), breaks = seq(0, 1, .1)) +
scale_x_continuous(limits = c(0, 1), breaks = seq(0, 1, .1)) +
geom_point()
test_prediction_probs <- predict.train(glmnet_model_1,
newdata = test_data,
type = "prob")
summary(test_prediction_probs$Yes)
test_prediction_matrix_glmnet <- ifelse(test_prediction_probs$Yes < 0.12, "Yes", "No")
test_prediction_matrix_glmnet <- factor(test_prediction_matrix2, levels = c("Yes", "No"))
test_prediction_probs <- predict.train(glmnet_model_1,
newdata = test_data,
type = "prob")
summary(test_prediction_probs$Yes)
test_prediction_matrix_glmnet <- ifelse(test_prediction_probs$Yes < 0.12, "Yes", "No")
test_prediction_matrix_glmnet <- factor(test_prediction_matrix_glmnet, levels = c("Yes", "No"))
confusionMatrix(test_prediction_matrix_glmnet, test_truth)
test_prediction_probs2 <- predict.train(rpart_model_2,
newdata = test_data,
type = "prob")
summary(test_prediction_probs2$Yes)
test_prediction_matrix_rpart <- ifelse(test_prediction_probs2$Yes < 0.06, "Yes", "No")
test_prediction_matrix_rpart <- factor(test_prediction_matrix_rpart, levels = c("Yes", "No"))
confusionMatrix(test_prediction_matrix2, test_truth)
confusionMatrix(test_prediction_matrix_glmnet, test_truth)
test_prediction_probs <- predict.train(glmnet_model_1,
newdata = test_data,
type = "prob")
summary(test_prediction_probs$Yes)
test_prediction_matrix_glmnet <- ifelse(test_prediction_probs$Yes < 0.12, "Yes", "No")
test_prediction_matrix_glmnet <- factor(test_prediction_matrix_glmnet, levels = c("Yes", "No"))
confusionMatrix(test_prediction_matrix_glmnet, test_truth)
test_prediction_probs2 <- predict.train(rpart_model_2,
newdata = test_data,
type = "prob")
summary(test_prediction_probs2$Yes)
test_prediction_matrix_rpart <- ifelse(test_prediction_probs2$Yes < 0.06, "Yes", "No")
test_prediction_matrix_rpart <- factor(test_prediction_matrix_rpart, levels = c("Yes", "No"))
confusionMatrix(test_prediction_matrix_rpart, test_truth)
test_prediction_probs <- predict.train(glmnet_model_1,
newdata = test_data,
type = "prob")
summary(test_prediction_probs$Yes)
test_prediction_matrix_glmnet <- ifelse(test_prediction_probs$Yes < 0.13, "Yes", "No")
test_prediction_matrix_glmnet <- factor(test_prediction_matrix_glmnet, levels = c("Yes", "No"))
confusionMatrix(test_prediction_matrix_glmnet, test_truth)
test_prediction_probs2 <- predict.train(rpart_model_2,
newdata = test_data,
type = "prob")
summary(test_prediction_probs2$Yes)
test_prediction_matrix_rpart <- ifelse(test_prediction_probs2$Yes < 0.09, "Yes", "No")
test_prediction_matrix_rpart <- factor(test_prediction_matrix_rpart, levels = c("Yes", "No"))
confusionMatrix(test_prediction_matrix_rpart, test_truth)
set.seed(625)
test_prediction_glmnet <- predict.train(glmnet_model_1,
newdata = test_data,
type = "prob")
glmnet_prediction <- prediction(test_prediction_glmnet$Yes,
test_data[["default"]])
glmnet_perf <- performance(glmnet_prediction, measure = "tpr", x.measure = "fpr")
glmnet_roc_df <- data.table(
model = "glmnet",
FPR = glmnet_perf@x.values[[1]],
TPR = glmnet_perf@y.values[[1]],
cutoff = glmnet_perf@alpha.values[[1]]
)
test_prediction_rpart <- predict.train(rpart_model_2,
newdata = test_data,
type = "prob")
rpart_prediction <- prediction(test_prediction_rpart$Yes,
test_data[["default"]])
rpart_perf <- performance(rpart_prediction, measure = "tpr", x.measure = "fpr")
rpart_roc_df <- data.table(
model = "rpart",
FPR = rpart_perf@x.values[[1]],
TPR = rpart_perf@y.values[[1]],
cutoff = rpart_perf@alpha.values[[1]]
)
roc_df <- rbind(rpart_roc_df, glmnet_roc_df)
ggplot(roc_df) +
geom_line(aes(FPR, TPR, color = model), size = 2) +
geom_abline(intercept = 0, slope = 1,  linetype = "dotted", col = "black") +
scale_y_continuous(limits = c(0, 1), breaks = seq(0, 1, .1)) +
scale_x_continuous(limits = c(0, 1), breaks = seq(0, 1, .1)) +
xlab("False Positive Rate") + ylab("True Positive Rate")
test_prediction_matrix_glmnet <- predict.train(glmnet_model_2,
newdata = test_data)
test_truth <- test_data[["default"]]
confusionMatrix(test_prediction_matrix_glmnet, test_truth)
test_prediction_matrix_rpart <- predict.train(rpart_model_2,
newdata = test_data)
test_truth <- test_data[["default"]]
confusionMatrix(test_prediction_matrix_rpart, test_truth)
View(test_prediction_glmnet)
thresholds <- seq(0.05, 0.2, by = 0.01)
true_positive_rates <- rep(0, length(thresholds))
false_positive_rates <- rep(0, length(thresholds))
for (ix in 1:length(thresholds)) {
thr <- thresholds[ix]
test_prediction <- ifelse(test_prediction_glmnet$Yes > thr, "Yes", "No")
test_prediction <- factor(test_prediction, levels = c("Yes", "No"))
cm <- as.matrix(confusionMatrix(test_prediction, test_truth))
true_positive_rates[ix] <- cm[1, 1] / (cm[1, 1] + cm[2, 1])
false_positive_rates[ix] <- cm[1, 2] / (cm[1, 2] + cm[2, 2])
}
manual_roc <- data.table("threshold" = thresholds,
"true_positive_rate" = true_positive_rates,
"false_positive_rate" = false_positive_rates)
ggplot(data = manual_roc,
aes(x = false_positive_rate,
y = true_positive_rate,
color = threshold)) +
scale_y_continuous(limits = c(0, 1), breaks = seq(0, 1, .1)) +
scale_x_continuous(limits = c(0, 1), breaks = seq(0, 1, .1)) +
geom_point()
test_prediction_probs <- predict.train(glmnet_model_1,
newdata = test_data,
type = "prob")
summary(test_prediction_probs$Yes)
test_prediction_matrix_glmnet <- ifelse(test_prediction_probs$Yes < 0.12, "Yes", "No")
test_prediction_matrix_glmnet <- factor(test_prediction_matrix_glmnet, levels = c("Yes", "No"))
confusionMatrix(test_prediction_matrix_glmnet, test_truth)
test_prediction_probs2 <- predict.train(rpart_model_2,
newdata = test_data,
type = "prob")
summary(test_prediction_probs2$Yes)
test_prediction_matrix_rpart <- ifelse(test_prediction_probs2$Yes < 0.09, "Yes", "No")
test_prediction_matrix_rpart <- factor(test_prediction_matrix_rpart, levels = c("Yes", "No"))
confusionMatrix(test_prediction_matrix_rpart, test_truth)
test_prediction_probs <- predict.train(glmnet_model_1,
newdata = test_data,
type = "prob")
summary(test_prediction_probs$Yes)
test_prediction_matrix_glmnet <- ifelse(test_prediction_probs$Yes < 0.12, "Yes", "No")
test_prediction_matrix_glmnet <- factor(test_prediction_matrix_glmnet, levels = c("Yes", "No"))
confusionMatrix(test_prediction_matrix_glmnet, test_truth)
test_prediction_probs2 <- predict.train(rpart_model_2,
newdata = test_data,
type = "prob")
summary(test_prediction_probs2$Yes)
test_prediction_matrix_rpart <- ifelse(test_prediction_probs2$Yes < 0.06, "Yes", "No")
test_prediction_matrix_rpart <- factor(test_prediction_matrix_rpart, levels = c("Yes", "No"))
confusionMatrix(test_prediction_matrix_rpart, test_truth)
test_prediction_probs <- predict.train(glmnet_model_1,
newdata = test_data,
type = "prob")
summary(test_prediction_probs$Yes)
test_prediction_matrix_glmnet <- ifelse(test_prediction_probs$Yes < 0.12, "Yes", "No")
test_prediction_matrix_glmnet <- factor(test_prediction_matrix_glmnet, levels = c("Yes", "No"))
confusionMatrix(test_prediction_matrix_glmnet, test_truth)
test_prediction_probs2 <- predict.train(rpart_model_2,
newdata = test_data,
type = "prob")
summary(test_prediction_probs2$Yes)
test_prediction_matrix_rpart <- ifelse(test_prediction_probs2$Yes < 0.05, "Yes", "No")
test_prediction_matrix_rpart <- factor(test_prediction_matrix_rpart, levels = c("Yes", "No"))
confusionMatrix(test_prediction_matrix_rpart, test_truth)
library(readr)
library(descr)
library(dplyr)
library(tidyr)
library(ggplot2)
library(lmtest)
library(data.table)
library(caret)
library(rpart)
library(sandwich)
library(lmtest)
library(glmnet)
library(ROCR)
rm(list=ls())
getwd()
setwd('C:/Users/adasan01/OneDrive - ARM/Desktop/CEU/Winter 2017-18/Data Analysis 4/Assignment 2')
data <- read.csv("bisnode_all.csv")
data <- data.table(data)
data2 <- subset(data, sales >= 0)
data3 <- subset(data2, comp_id!="." &
sales!="." & year!="." & founded_year!="." &
birth_year!="." & inoffice_days & labor_avg!="." &
ind!="." & urban_m!="." & gender!=".")
data_clean <- subset(data3, select = c(comp_id, profit_loss_year,
sales, year, founded_year,
birth_year, labor_avg,
inoffice_days, origin,
ind, urban_m, gender, curr_assets, liq_assets, personnel_exp))
data4 <- subset(data_clean, select = c(comp_id,year,sales))
data5 <- spread(data4, year, sales)
data6 <- data5[, sales_growth := ((`2015` - `2011`)/`2011`)*100]
data7 <- subset(data6, select = c(comp_id,sales_growth))
full_data <- merge(data_clean, data7, by = "comp_id")
final_data <- full_data[, comp_age := year - founded_year]
final_data <- full_data[, CEO_age := 2015 - birth_year]
final_data <- full_data[, inoffice_years := inoffice_days / 365.25]
final_data$default <- ifelse(final_data$sales_growth < -50, "Yes", "No")
final_data_filtered <- final_data[!is.na(default)]
final_data_filtered <- na.omit(final_data_filtered)
freq(final_data_filtered$default)
train_data <- final_data_filtered[year %in% c(2011, 2012, 2013, 2014)]
test_data <- final_data_filtered[year %in% c(2015)]
train_control <- trainControl(method = "cv",
number = 5,
classProbs = TRUE,
verboseIter = TRUE,
summaryFunction = twoClassSummary) # necessary!
tune_grid <- expand.grid("alpha" = c(0, 1),
"lambda" = c(0.01, 0.001, 0.0001))
set.seed(125)
glmnet_model_1 <- train(default ~ poly(curr_assets, 3) + poly(liq_assets, 3) + poly(labor_avg, 3) + poly(personnel_exp, 3),
data = train_data,
method = "glmnet",
preProcess = c("center", "scale"),
trControl = train_control,
na.action = na.omit,
tuneGrid = tune_grid,
metric = "ROC")  # set it to ROC to choose models based on AUC
glmnet_model_2 <- train(default ~ poly(curr_assets, 3) + poly(liq_assets, 3) + poly(labor_avg, 3) + poly(personnel_exp, 3) + urban_m + ind + inoffice_years + comp_age + CEO_age + founded_year,
data = train_data,
method = "glmnet",
preProcess = c("center", "scale"),
trControl = train_control,
na.action = na.omit,
tuneGrid = tune_grid,
metric = "ROC")  # set it to ROC to choose models based on AUC
glmnet_model_1
glmnet_model_2
tune_grid2 <- data.frame("cp" = 0.0001)
set.seed(125)
rpart_model_1 <- train(default ~ poly(curr_assets, 3) + poly(liq_assets, 3) + poly(labor_avg, 3) + poly(personnel_exp, 3),
data = train_data,
method = "rpart",
preProcess = c("center", "scale"),
trControl = train_control,
na.action = na.omit,
tuneGrid = tune_grid2,
metric = "ROC")  # set it to ROC to choose models based on AUC
rpart_model_2 <- train(default ~ poly(curr_assets, 3) + poly(liq_assets, 3) + poly(labor_avg, 3) + poly(personnel_exp, 3) + urban_m + ind + inoffice_years + comp_age + CEO_age + founded_year,
data = train_data,
method = "rpart",
preProcess = c("center", "scale"),
trControl = train_control,
na.action = na.omit,
tuneGrid = tune_grid2,
metric = "ROC")  # set it to ROC to choose models based on AUC
rpart_model_1
rpart_model_2
set.seed(625)
test_prediction_glmnet <- predict.train(glmnet_model_1,
newdata = test_data,
type = "prob")
glmnet_prediction <- prediction(test_prediction_glmnet$Yes,
test_data[["default"]])
glmnet_perf <- performance(glmnet_prediction, measure = "tpr", x.measure = "fpr")
glmnet_roc_df <- data.table(
model = "glmnet",
FPR = glmnet_perf@x.values[[1]],
TPR = glmnet_perf@y.values[[1]],
cutoff = glmnet_perf@alpha.values[[1]]
)
test_prediction_rpart <- predict.train(rpart_model_2,
newdata = test_data,
type = "prob")
rpart_prediction <- prediction(test_prediction_rpart$Yes,
test_data[["default"]])
rpart_perf <- performance(rpart_prediction, measure = "tpr", x.measure = "fpr")
rpart_roc_df <- data.table(
model = "rpart",
FPR = rpart_perf@x.values[[1]],
TPR = rpart_perf@y.values[[1]],
cutoff = rpart_perf@alpha.values[[1]]
)
roc_df <- rbind(rpart_roc_df, glmnet_roc_df)
ggplot(roc_df) +
geom_line(aes(FPR, TPR, color = model), size = 2) +
geom_abline(intercept = 0, slope = 1,  linetype = "dotted", col = "black") +
scale_y_continuous(limits = c(0, 1), breaks = seq(0, 1, .1)) +
scale_x_continuous(limits = c(0, 1), breaks = seq(0, 1, .1)) +
xlab("False Positive Rate") + ylab("True Positive Rate")
glmnet_AUC <- performance(glmnet_prediction, measure = "auc")@y.values[[1]]
print(glmnet_AUC)
rpart_AUC <- performance(rpart_prediction, measure = "auc")@y.values[[1]]
print(rpart_AUC)
test_prediction_matrix_glmnet <- predict.train(glmnet_model_2,
newdata = test_data)
test_truth <- test_data[["default"]]
confusionMatrix(test_prediction_matrix_glmnet, test_truth)
test_prediction_matrix_rpart <- predict.train(rpart_model_2,
newdata = test_data)
test_truth <- test_data[["default"]]
confusionMatrix(test_prediction_matrix_rpart, test_truth)
thresholds <- seq(0.05, 0.2, by = 0.01)
true_positive_rates <- rep(0, length(thresholds))
false_positive_rates <- rep(0, length(thresholds))
for (ix in 1:length(thresholds)) {
thr <- thresholds[ix]
test_prediction <- ifelse(test_prediction_glmnet$Yes > thr, "Yes", "No")
test_prediction <- factor(test_prediction, levels = c("Yes", "No"))
cm <- as.matrix(confusionMatrix(test_prediction, test_truth))
true_positive_rates[ix] <- cm[1, 1] / (cm[1, 1] + cm[2, 1])
false_positive_rates[ix] <- cm[1, 2] / (cm[1, 2] + cm[2, 2])
}
manual_roc <- data.table("threshold" = thresholds,
"true_positive_rate" = true_positive_rates,
"false_positive_rate" = false_positive_rates)
ggplot(data = manual_roc,
aes(x = false_positive_rate,
y = true_positive_rate,
color = threshold)) +
scale_y_continuous(limits = c(0, 1), breaks = seq(0, 1, .1)) +
scale_x_continuous(limits = c(0, 1), breaks = seq(0, 1, .1)) +
geom_point()
thresholds2 <- seq(0.05, 0.2, by = 0.01)
true_positive_rates <- rep(0, length(thresholds2))
false_positive_rates <- rep(0, length(thresholds2))
for (ix in 1:length(thresholds2)) {
thr <- thresholds2[ix]
test_prediction2 <- ifelse(test_prediction_rpart$Yes > thr, "Yes", "No")
test_prediction2 <- factor(test_prediction2, levels = c("Yes", "No"))
cm <- as.matrix(confusionMatrix(test_prediction2, test_truth))
true_positive_rates[ix] <- cm[1, 1] / (cm[1, 1] + cm[2, 1])
false_positive_rates[ix] <- cm[1, 2] / (cm[1, 2] + cm[2, 2])
}
manual_roc <- data.table("threshold" = thresholds2,
"true_positive_rate" = true_positive_rates,
"false_positive_rate" = false_positive_rates)
ggplot(data = manual_roc,
aes(x = false_positive_rate,
y = true_positive_rate,
color = threshold)) +
scale_y_continuous(limits = c(0, 1), breaks = seq(0, 1, .1)) +
scale_x_continuous(limits = c(0, 1), breaks = seq(0, 1, .1)) +
geom_point()
test_prediction_probs <- predict.train(glmnet_model_1,
newdata = test_data,
type = "prob")
summary(test_prediction_probs$Yes)
test_prediction_matrix_glmnet <- ifelse(test_prediction_probs$Yes < 0.12, "Yes", "No")
test_prediction_matrix_glmnet <- factor(test_prediction_matrix_glmnet, levels = c("Yes", "No"))
confusionMatrix(test_prediction_matrix_glmnet, test_truth)
test_prediction_probs2 <- predict.train(rpart_model_2,
newdata = test_data,
type = "prob")
summary(test_prediction_probs2$Yes)
test_prediction_matrix_rpart <- ifelse(test_prediction_probs2$Yes < 0.05, "Yes", "No")
test_prediction_matrix_rpart <- factor(test_prediction_matrix_rpart, levels = c("Yes", "No"))
confusionMatrix(test_prediction_matrix_rpart, test_truth)
test_prediction_probs <- predict.train(glmnet_model_1,
newdata = test_data,
type = "prob")
summary(test_prediction_probs$Yes)
test_prediction_matrix_glmnet <- ifelse(test_prediction_probs$Yes > 0.12, "Yes", "No")
test_prediction_matrix_glmnet <- factor(test_prediction_matrix_glmnet, levels = c("Yes", "No"))
confusionMatrix(test_prediction_matrix_glmnet, test_truth)
test_prediction_probs2 <- predict.train(rpart_model_2,
newdata = test_data,
type = "prob")
summary(test_prediction_probs2$Yes)
test_prediction_matrix_rpart <- ifelse(test_prediction_probs2$Yes > 0.05, "Yes", "No")
test_prediction_matrix_rpart <- factor(test_prediction_matrix_rpart, levels = c("Yes", "No"))
confusionMatrix(test_prediction_matrix_rpart, test_truth)
library(data.table)
library(XLConnect)
install.packages("XLConnectJars")
library(XLConnectJars)
data <- h2o.importFile("../../data/airlines/airline100K.csv")
library(h2o)
h2o.init(nthreads=-1)
library(h2o)
h2o.init(nthreads=-1)
library(h2o)
h2o.init(nthreads=-1)
library(h2o)
h2o.init()
library(foreign)
mydata <- read.dta("c:/Users/adasan01/OneDrive - ARM/Desktop/TacticalVoting/TStar 2018/de.dta")
library(readstata13)
mydata <- read.dta("c:/Users/adasan01/OneDrive - ARM/Desktop/TacticalVoting/TStar 2018/de.dta")
mydata <- read.dta("c:/Users/adasan01/OneDrive - ARM/Desktop/TacticalVoting/TStar 2018/de.dta")
library(haven)
mydata <- read.dta("c:/Users/adasan01/OneDrive - ARM/Desktop/TacticalVoting/TStar 2018/de.dta")
mydata <- readstata13("c:/Users/adasan01/OneDrive - ARM/Desktop/TacticalVoting/TStar 2018/de.dta")
library(readstata13)
mydata <- readstata13("c:/Users/adasan01/OneDrive - ARM/Desktop/TacticalVoting/TStar 2018/de.dta")
mydata <- readstata13::("c:/Users/adasan01/OneDrive - ARM/Desktop/TacticalVoting/TStar 2018/de.dta")
mydata <- read.dta("c:/Users/adasan01/OneDrive - ARM/Desktop/TacticalVoting/TStar 2018/de.dta")
install.packages("foreign")
install.packages("foreign")
library(foreign)
mydata <- read.dta("c:/Users/adasan01/OneDrive - ARM/Desktop/TacticalVoting/TStar 2018/de.dta")
library(foreign)
mydata <- read.dta("c:/Users/adasan01/OneDrive - ARM/Desktop/TacticalVoting/TStar 2018/de.dta")
source('~/GitHub/106/elorejelzes/106_OEVK_2018.R')
regression_2010_2014_fidesz <- glm(FIDESZ_2014_pc ~ FIDESZ_2010_pc + szavazokorok_szama.x + telepulesek_szama + profil + varos_aranya, data=data_2010_2014_szavazokor)
summary(regression_2010_2014_fidesz)
write.csv(by_oevk_2014, 'oevk2014_clean.csv')
by_oevk_2014 <- by_szavazokor_2014[, list(szavazok = sum(szavazok),
reszvetel = sum(szavazok) / sum(ossz_szavazo),
ossz_szavazo = sum(ossz_szavazo),
egyeni_fidesz = sum(egyeni_fidesz),
egyeni_lmp = sum(egyeni_lmp),
egyeni_kormanyvaltok = sum(egyeni_kormanyvaltok),
egyeni_jobbik = sum(egyeni_jobbik),
egyeni_fidesz = sum(egyeni_fidesz) / sum(egyeni_fidesz + egyeni_lmp + egyeni_kormanyvaltok + egyeni_jobbik),
egyeni_lmp_pc = sum(egyeni_lmp) / sum(egyeni_fidesz + egyeni_lmp + egyeni_kormanyvaltok + egyeni_jobbik),
egyeni_kormanyvaltok_pc = sum(egyeni_kormanyvaltok) / sum(egyeni_fidesz + egyeni_lmp + egyeni_kormanyvaltok + egyeni_jobbik),
egyeni_jobbik_pc = sum(egyeni_jobbik) / sum(egyeni_fidesz + egyeni_lmp + egyeni_kormanyvaltok + egyeni_jobbik),
szavazokorok_szama = sqrt(sum(szavazokorok_szama))),
by = oevk][order(oevk)]
write.csv(by_oevk_2014, 'oevk2014_clean.csv')
